<html>

<head>
  <script src="https://d3js.org/d3.v6.min.js"></script>
  <script src="https://unpkg.com/d3-force-boundary@0.0.1/dist/d3-force-boundary.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <link rel="stylesheet" type="text/css" href="style.css">
  <script src="drawLegend.js"></script>

  <style>
    .pointerRec {
      cursor: pointer;
    }

    .node {
      cursor: pointer;
    }
    
</style>
</head>

<body>
  <div class="title">
    <h3>Not just SVB. There have been 563 bank failures since 2000</h3>
    <p>One way to measure the magnitude of a bank's failure is by the amount of assets the bank held. By that measure,
      SVB's collapse is the second largest American bank failure of all time, and the largest since 2008. The vast
      majority of failures since 2000 have been smaller regional banks.</p>
    <p>The dataset is from <a href="https://www.fdic.gov/bank/historical/bank/">FDIC</a> and the original visualization
      can be viewed <a href="https://yarn.pranshum.com/banks">here</a>.</p>
  </div>
  <div class="diagrams">
    <div class="left">
      <p>&#11015; Click the circle to learn more about the bank</p>
      <svg id="network" width="800" height="1000"></svg>
    </div>
    <div class="right">
      <svg id="legend" width="500" height="50"></svg>
      <svg id="priceSvg" width=400 height=350></svg>
      <svg id="map" width="500" height="350"></svg>
    </div>
  </div>
</body>

<script>

  const svg = d3.select("svg#network");
  const height = svg.attr("height");
  const width = svg.attr("width");

  let chartArea = svg.append("g").attr('transform', 'translate(-60, 100)');

  const requestData = async () => {
    const data = await d3.csv("datasets/bfb-data.csv", d3.autoType);
    const dataFilter0 = await d3.json("datasets/total.json", d3.autoType);

    let i = 0;
    let alldict = {};
    dataFilter0.forEach(d => {
      d["unique_id"] = "x" + i;
      alldict[d.Bank + d.Asset] = "x" + i;
      i++
    })

    data.forEach(d => {
      // convert a currency string to a double 
      d["Asset"] = parseFloat(d["Approx. Asset (Millions)"].replace(/[$,]+/g, ""));
      d["Deposit"] = parseFloat(d["Approx. Deposit (Millions)"].replace(/[$,]+/g, ""));

      // split bank name, city, and state 
      const arr = d["Bank Name, City, State"].split(', ');
      d["Bank"] = arr[0];
      d["City"] = arr[1];
      d["State"] = arr[2];
      d["unique_id"] = alldict[d.Bank + d.Asset];
    });

    // sort data by descending Asset
    function compare(a, b) {
      if (a.Asset > b.Asset) {
        return -1;
      }
      if (a.Asset < b.Asset) {
        return 1;
      }
      return 0;
    }
    data.sort(compare);
    console.log("data after processing", data);

    // External code for wrapping a text in d3
    // Citation: https://stackoverflow.com/questions/24784302/wrapping-text-in-d3 
    function wrap(text, width) {
      text.each(function () {
        var text = d3.select(this),
          words = text.text().split(/\s+/).reverse(),
          word,
          line = [],
          lineNumber = 0,
          lineHeight = 1.1, // ems
          x = text.attr("x"),
          y = text.attr("y"),
          dy = 0, //parseFloat(text.attr("dy")),
          tspan = text.text(null)
            .append("tspan")
            .attr("x", x)
            .attr("y", y)
            .attr("dy", dy + "em");
        while (word = words.pop()) {
          line.push(word);
          tspan.text(line.join(" "));
          if (tspan.node().getComputedTextLength() > width) {
            line.pop();
            tspan.text(line.join(" "));
            line = [word];
            tspan = text.append("tspan")
              .attr("x", x)
              .attr("y", y)
              .attr("dy", ++lineNumber * lineHeight + dy + "em")
              .text(word);
          }
        }
      });
    }

    //Start of the US Map code
    const newsvg = d3.select("svg#map");
    const viewport2 = newsvg.append("g");

    const mainWidth = newsvg.attr("width");
    const mainHeight = newsvg.attr("height");

    let map_render = async function () {
      let us = await d3.json("./us-map2.json");

      let projection = d3.geoAlbersUsa().fitSize([mainWidth, mainHeight], us);

      let path = d3.geoPath().projection(projection);

      let cities = await d3.csv("./uscities.csv");

      let accum = 0;
      let newdata9 = [];

      data.forEach((d) => {
        accum = 0;
        cities.forEach((k) => {
          if (d.City == k.city) {
            if (d.State == k.state_id || d.State == k.state_name) {
              d.Position = projection([k.lng, k.lat]);
              accum++;
            }
          }
        });
        if (d.Position) {
          newdata9.push(d);
        }
      })

      viewport2.selectAll("path")
        .data(us.features)
        .join("path")
        .attr("d", path)
        .attr("fill", "#fff")
        .attr("stroke", "#000")
        .attr("stroke-width", 1);


      viewport2.selectAll('circle')
        .data(newdata9)
        .enter()
        .append('circle')
        .attr("id", d => d.unique_id)
        .attr("class", d => d.Bank)
        .attr('cx', d => d.Position[0])
        .attr('cy', d => d.Position[1])
        .attr('r', 6)
        .attr('stroke', "black")
        .attr('opacity', 0.7)
        .attr("fill", d => colorScale(d['Asset']));
    }
    map_render();

    function drawNetworkDiagram(data) {
      let assetExtent = d3.extent(data, d => d['Asset']);
      let assetScale = d3.scaleSqrt().domain(assetExtent).range([3, 130]);
      const colorScale = d3.scaleLog().domain(assetExtent).interpolate(d => d3.interpolateYlGn);

      // Instructor provided code
      // Citation: https://github.com/jeffrz/info3300-fa2022/blob/main/notes/22.10.03.notes.htm
      drawLegend("svg#legend", colorScale);

      // Initial drawing for zoom
      // let circles = chartArea.selectAll("circle.node")
      //   .data(data)
      //   .join(
      //     enter => enter.append("circle")
      //       .attr("class", "node")
      //       .attr("r", d => assetScale(d['Asset']))
      //       .attr("cx", d => d.x)
      //       .attr("cy", d => d.y)
      //       .attr("fill", d => colorScale(d['Asset']))
      //     // .call(d3.drag().on("start", dragstart)
      //     //   .on("drag", dragging)
      //     //   .on("end", dragend))
      //   )
      //   .transition()
      //   .duration(1250)
      //   .attr('opacity', 1)
      // var k = 1;
      // //zooming
      // var zoom = d3.zoom().scaleExtent([1, 10]).on("zoom", zoomed)
      // svg.call(zoom);
      // function zoomed(event) {
      //   chartArea.attr("transform", event.transform);
      //   k = event.transform.k
      // }

      // Simulation for network diagram
      // var simulation = d3.forceSimulation()
      //   .nodes(data)
      //   .force("collision", d3.forceCollide().radius(d => assetScale(d['Asset']) + 3).strength(0.5))
      //   .force("center", d3.forceCenter(width / 2, height / 2))
      //   .force("charge", d3.forceManyBody().strength(0.5))
      //   .on("tick", render);

      function render() {
        var clicked = null;
        let circles = chartArea.selectAll("circle.node")
          .data(data)
          .join(
            enter => enter.append("circle")
              .attr('id', d => d.unique_id)
              .attr("class", d => {
                if (d.Asset >= 77000) {
                  return "node k310k";
                }
                else if (d.Asset > 20000) {
                  return "node k77k";
                }
                else if (d.Asset > 4900) {
                  return "node k20k";
                } else if (d.Asset > 1300) {
                  return "node k49k";
                } else if (d.Asset > 310) {
                  return "node k13k";
                } else if (d.Asset > 80) {
                  return "node k310";
                } else if (d.Asset > 20) {
                  return "node k80";
                } else if (d.Asset >= 4.9) {
                  return "node k20";
                }
              })
              .attr("r", d => assetScale(d['Asset']))
              .attr("cx", d => d.x)
              .attr("cy", d => d.y)
              .attr("fill", d => colorScale(d['Asset']))
              .on("click", function (d) {
                let node = d3.select(this)
                let selectedData = node.datum();
                var selectedCircle = node.node().getBBox();

                viewport2.select("circle#" + this.id)
                  .attr("fill", "red")
                  .attr("opacity", 1)
                  .attr("r", 7)
                  .raise();

                if (clicked == this) {
                  viewport2.select("circle#" + this.id)
                    .attr("fill", d => colorScale(d['Asset']))
                    .attr("opacity", 0.7)
                    .attr("r", 5)
                    .raise();

                  node.transition().duration(650).attr("fill", d => colorScale(d['Asset']))
                    .attr("r", d => assetScale(d['Asset']))
                    .style("stroke", "none");
                  let circleText = chartArea.append("text")
                    .attr("class", "extra")
                    .style("text-anchor", "middle")
                    .style("text-align", "center")
                    .style("fill", "white")
                    .style("pointer-events", "none")
                    .attr("x", d => selectedCircle.x + selectedCircle.width / 2)
                    .attr("y", d => {
                      if (assetScale(selectedData['Asset']) > 30) {
                        return selectedCircle.y + selectedCircle.width / 2 - 5;
                      } else if (assetScale(selectedData['Asset']) > 15) {
                        return selectedCircle.y + selectedCircle.width / 2 + 3;
                      }
                    })
                    .attr("width", d => assetScale(selectedData['Asset']))
                    .style("overflow-y", "auto")
                    .style("font-size", "10px")
                    .text(d => {
                      if (assetScale(selectedData['Asset']) > 30) {
                        return selectedData['Bank'] + "\n" + selectedData['Approx. Asset (Millions)'].split('.')[0];
                      } else if (assetScale(selectedData['Asset']) > 15) {
                        return selectedData['Approx. Asset (Millions)'].split('.')[0];
                      } else {
                        return "";
                      }
                    })
                    .call(wrap, 60);
                  clicked = null;
                  d3.selectAll(".info").remove();
                } else {

                  let pastNode;
                  if (clicked == null) {
                    pastNode = d3.select(this)
                  } else {
                    pastNode = d3.select(clicked)
                  }
                  pastNode.transition().duration(650).attr("fill", d => colorScale(d['Asset']))
                    .attr("r", d => assetScale(d['Asset']))
                    .style("stroke", "none");
                  let pastData = pastNode.datum()
                  let pastCircle = pastNode.node().getBBox()
                  node.transition().duration(650).style("stroke", "white")
                    .style("stroke-width", "5px")
                    .attr("r", function (d) {
                      x = assetScale(d["Asset"]);
                      if (x > 50) {
                        return x + 30;
                      } else if (x < 51 && x > 20) {
                        return 140;
                      } else {
                        return 120;
                      }
                    });
                  let circleText = chartArea.append("text")
                    .attr("class", "extra")
                    .style("text-anchor", "middle")
                    .style("text-align", "center")
                    .style("fill", "white")
                    .style("pointer-events", "none")
                    .attr("x", d => pastCircle.x + pastCircle.width / 2)
                    .attr("y", d => {
                      if (assetScale(pastData['Asset']) > 30) {
                        return pastCircle.y + pastCircle.width / 2 - 5;
                      } else if (assetScale(pastData['Asset']) > 15) {
                        return pastCircle.y + pastCircle.width / 2 + 3;
                      }
                    })
                    .attr("width", d => assetScale(pastData['Asset']))
                    .style("overflow-y", "auto")
                    .style("font-size", "10px")
                    .text(d => {
                      if (assetScale(pastData['Asset']) > 30) {
                        return pastData['Bank'] + "\n" + pastData['Approx. Asset (Millions)'].split('.')[0];
                      } else if (assetScale(pastData['Asset']) > 15) {
                        return pastData['Approx. Asset (Millions)'].split('.')[0];
                      } else {
                        return "";
                      }
                    })
                    .call(wrap, 60);
                  clicked = this;
                  node.raise();
                  d3.selectAll(".info").remove();
                  chartArea.append("text")
                    .data(data)
                    .attr("class", "info")
                    .attr('x', selectedCircle.x + selectedCircle.width / 2)
                    .attr('y', selectedCircle.y + (selectedCircle.height - 30) / 2)
                    .transition().duration(650)
                    .style("font-size", "15px")
                    .style("text-anchor", "middle")
                    .style("text-align", "center")
                    .style("fill", "white")
                    .style('pointer-events', "none")
                    .style("font-weight", "bold")
                    .text(d => {
                      return selectedData['Bank'];
                    })
                    .call(wrap, 1000);
                  chartArea.append("text")
                    .data(data)
                    .attr("class", "info")
                    .attr('x', selectedCircle.x + selectedCircle.width / 2)
                    .attr('y', selectedCircle.y + (selectedCircle.height) / 2)
                    .transition().duration(650)
                    .style("font-size", "13px")
                    .style("text-anchor", "middle")
                    .style("text-align", "center")
                    .style("fill", "white")
                    .style('pointer-events', "none")
                    .text(d => {
                      return "Closing Date: " + selectedData["Closing Date"];
                    })
                    .call(wrap, 1000);
                  chartArea.append("text")
                    .data(data)
                    .attr("class", "info")
                    .attr('x', selectedCircle.x + selectedCircle.width / 2)
                    .attr('y', selectedCircle.y + (selectedCircle.height + 30) / 2)
                    .transition().duration(650)
                    .style("font-size", "13px")
                    .style("text-anchor", "middle")
                    .style("text-align", "center")
                    .style("fill", "white")
                    .style('pointer-events', "none")
                    .text(d => {
                      return "Assets: " + selectedData['Approx. Asset (Millions)'].split('.')[0];
                    })
                    .call(wrap, 1000);
                  chartArea.append("text")
                    .data(data)
                    .attr("class", "info")
                    .attr('x', selectedCircle.x + selectedCircle.width / 2)
                    .attr('y', selectedCircle.y + (selectedCircle.height + 60) / 2)
                    .transition().duration(650)
                    .style("font-size", "13px")
                    .style("text-anchor", "middle")
                    .style("text-align", "center")
                    .style("fill", "white")
                    .style('pointer-events', "none")
                    .text(d => {
                      return selectedData["City"] + ", " + selectedData["State"];
                    })
                    .call(wrap, 1000);
                }
              })
            // Enable drag and drop
            // .call(d3.drag().on("start", dragstart)
            //   .on("drag", dragging)
            //   .on("end", dragend))
          )
          .transition()
          .duration(1250)
          .attr('opacity', 1)

        let circleText = chartArea.selectAll("text.label")
          .data(data)
          .join("text")
          .attr("class", "label")
          .style("text-anchor", "middle")
          .style("text-align", "center")
          .style("fill", "white")
          .style("pointer-events", "none")
          .attr("x", d => d.x)
          .attr("y", d => {
            if (assetScale(d['Asset']) > 30) {
              return d.y - 5;
            } else if (assetScale(d['Asset']) > 15) {
              return d.y + 3;
            }
          })
          .attr("width", d => assetScale(d['Asset']))
          .style("overflow-y", "auto")
          .style("font-size", "10px")
          .text(d => {
            if (assetScale(d['Asset']) > 30) {
              return d['Bank'] + "\n" + d['Approx. Asset (Millions)'].split('.')[0];
            } else if (assetScale(d['Asset']) > 15) {
              return d['Approx. Asset (Millions)'].split('.')[0];
            } else {
              return "";
            }
          })
          .call(wrap, 60);
      }
      render();

      // function dragstart(event, d) {
      //   if (!event.active) {
      //     simulation.alphaTarget(0.08).restart();
      //   }
      //   d.fx = event.x;
      //   d.fy = event.y;
      // }
      // function dragging(event, d) {
      //   d.fx = event.x;
      //   d.fy = event.y;
      // }
      // function dragend(event, d) {
      //   if (!event.active) {
      //     simulation.alpha(0.5)
      //       .alphaTarget(0.3)
      //       .restart();
      //     simulation.force("collision").initialize(data);
      //   }
      //   d.fx = null;
      //   d.fy = null;
      // }
    }

    drawNetworkDiagram(dataFilter0);

    // ** price bar chart ** 

    // 1. set up data 
    asset = [];
    assetDict = {};

    data.forEach(d => {
      asset.push(d["Asset"])
    });

    // 2. calculate the batch 
    // const rangeStart = 4.9;
    // const rangeEnd = 1000;
    // const batchSize = (rangeEnd - rangeStart) / 3;

    // for (let i = 0; i < 3; i++) {
    //   const batchStart = rangeStart + (i * batchSize);
    //   const batchEnd = batchStart + batchSize;
    //   console.log(`Batch ${i + 1}: ${batchStart.toFixed(1)} - ${batchEnd.toFixed(1)}`);
    // }

    // // 3. make the dictionary of counts for the price: tick: 6
    // assetDict["4.9M"] = 0, assetDict["336M"] = 0, assetDict["668M"] = 0;
    // assetDict["1B"] = 0;
    // assetDict["5B"] = 0;
    // // assetDict["10000.0"] = 0;
    // assetDict["10B"] = 0;

    // for (let i = 0; i < asset.length; i++) {
    //   if (asset[i] > 100000) {
    //     assetDict["10B"] += 1
    //   }
    //   // else if (asset[i] > 10000) {
    //   //   assetDict["10000.0"] += 1
    //   // } 
    //   else if (asset[i] > 5000) {
    //     assetDict["5B"] += 1
    //   } 
    //   else if (asset[i] > 1000) {
    //     assetDict["1B"] += 1
    //   } else if (asset[i] > 668.3) {
    //     assetDict["668M"] += 1
    //   } else if (asset[i] > 336.6) {
    //     assetDict["336M"] += 1
    //   } else if (asset[i] > 4.9) {
    //     assetDict["4.9M"] += 1
    //   }
    // }

    const rangeStart = 4.9;
    const rangeEnd = 1000;
    const batchSize = (rangeEnd - rangeStart) / 3;

    // for (let i = 0; i < 3; i++) {
    //   const batchStart = rangeStart + (i * batchSize);
    //   const batchEnd = batchStart + batchSize;
    //   console.log(`Batch ${i + 1}: ${batchStart.toFixed(1)} - ${batchEnd.toFixed(1)}`);
    // }

    // 3. make the dictionary of counts for the price: tick: 6
    assetDict["20"] = 0, assetDict["80"] = 0, assetDict["310"] = 0;
    assetDict["1.3K"] = 0, assetDict["4.9K"] = 0, assetDict["20K"] = 0;
    assetDict["77K"] = 0, assetDict["310K"] = 0

    for (let i = 0; i < asset.length; i++) {
      if (asset[i] >= 77000) {
        assetDict["310K"] += 1
      }
      else if (asset[i] > 20000) {
        assetDict["77K"] += 1
      }
      else if (asset[i] > 4900) {
        assetDict["20K"] += 1
      } else if (asset[i] > 1300) {
        assetDict["4.9K"] += 1
      } else if (asset[i] > 310) {
        assetDict["1.3K"] += 1
      } else if (asset[i] > 80) {
        assetDict["310"] += 1
      } else if (asset[i] > 20) {
        assetDict["80"] += 1
      } else if (asset[i] >= 4.9) {
        assetDict["20"] += 1
      }
    }

    // 4. set up the svg 
    var svg2 = d3.select("#priceSvg"),
      margin2 = { top: 30, right: 0, bottom: 30, left: 50 },
      width2 = +svg.attr("width") - margin2.left - margin2.right,
      height2 = +svg.attr("height") - margin2.top - margin2.bottom

    g = svg2.append("g").attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

    //  Define the scales for the x and y axes
    let xScale = d3.scaleBand()
      .domain(Object.keys(assetDict))
      .range([margin2.left, 400]) //0, width
      .padding(0.2);

    let yScale = d3.scaleLinear()
      .domain([0, d3.max(Object.values(assetDict))])
      .range([300 - margin2.top - margin2.bottom, 0]); //height, 0

    // color scale for bars 
    const colors = ['#FBFCD4', '#EAF5B6', '#CAE4A1', '#A0CE8B', '#74B573', '#509457', '#367343', '#235533'];
    const colorScale = d3.scaleOrdinal().domain(Object.keys(assetDict)).range(colors);

    // Create the bars
    svg2.selectAll('rect')
      .data(Object.entries(assetDict))
      .enter()
      .append('rect')
      .attr("id", (d) => d[0])
      .attr("class", "pointerRec")
      .attr('x', (d) => xScale(d[0]))
      .attr('y', (d) => margin2.top + yScale(d[1]))
      .attr('width', xScale.bandwidth())
      .attr('height', 0)
      .attr('fill', (d) => colorScale(d[0]))
      .transition()
      .duration(1250)
      .attr('height', (d) => 305 - margin2.top - margin2.bottom - yScale(d[1]));

    // x and y axis labels and titles
    svg2.append('g')
      .attr('transform', 'translate(0, 275)')
      .call(d3.axisBottom(xScale)
        .tickFormat(function (d) {
          return d;
        }));

    svg2.append('g')
      .attr("transform", `translate(${margin2.left}, ${margin2.top + 5})`)
      .call(d3.axisLeft(yScale));

    //axis label
    // svg2.append("text")
    //   .attr("x", (200 - margin2.left))
    //   .attr("y", 15)
    //   .attr("text-anchor", "middle")
    //   .style("font-size", "18px")
    //   .style("font-weight", "bold")
    //   .style("fill", "black")
    //   .text("Number of Banks by Asset (Millions)");

    svg2.append('text')
      .attr("transform", "translate(" + (200) + " ," + (320) + ")") //320=y 
      // .attr('x', width2 / 2 + 10)
      // .attr('y', height2 - 10)
      .attr('text-anchor', 'middle')
      .style("font-size", "14px")
      .text('Assets (in Millions of Dollars)');

    svg2.append("text")
      .attr("text-anchor", "middle")
      .attr("x", -160)
      // .attr("x", -height / 2 + margin2.top + margin2.bottom + 100)
      .attr("y", 10) // distance to the graph
      .attr("transform", "rotate(-90)")
      .style("font-size", "14px")
      .text("Number of Banks");


    let labels = svg2.selectAll('.label')
      .data(Object.entries(assetDict))
      .enter()
      .append('text')
      .attr('class', 'label')
      .attr('x', (d) => xScale(d[0]) + xScale.bandwidth() / 2)
      .attr('y', (d) => margin2.top + yScale(d[1]) - 5) // Adjust y position
      .text((d) => d[1])
      .style("font-size", "12px")
      .style('text-anchor', 'middle')
      .style('visibility', 'visible');


    svg2.selectAll('rect')
      .on('click', function (d) {
          chartArea.selectAll(".k20").style("opacity", 1);
          chartArea.selectAll(".k80").style("opacity", 1);
          chartArea.selectAll(".k310").style("opacity", 1);
          chartArea.selectAll(".k13k").style("opacity", 1);
          chartArea.selectAll(".k49k").style("opacity", 1);
          chartArea.selectAll(".k20k").style("opacity", 1);
          chartArea.selectAll(".k77k").style("opacity", 1);
          chartArea.selectAll(".k310k").style("opacity", 1);

        let clickedBar = d3.select(this);
        clickedData = clickedBar._groups[0][0].__data__[0];

        if (clickedData != "20"){
          chartArea.selectAll(".k20").style("opacity", 0);
        }
        if (clickedData != "80"){
          chartArea.selectAll(".k80").style("opacity", 0);
        }
        if (clickedData != "310"){
          chartArea.selectAll(".k310").style("opacity", 0);
        }
        if (clickedData != "1.3K"){
          chartArea.selectAll(".k13k").style("opacity", 0);
        }
        if (clickedData != "4.9K"){
          chartArea.selectAll(".k49k").style("opacity", 0);
        }
        if (clickedData != "20K"){
          chartArea.selectAll(".k20k").style("opacity", 0);
        }
        if (clickedData != "77K"){
          chartArea.selectAll(".k77k").style("opacity", 0);
        }
        if (clickedData != "310K"){
          chartArea.selectAll(".k310k").style("opacity", 0);
        }
      });

    let onRect = false;

    svg2.selectAll("rect").on("mouseover", function (event, d) {
      onRect = true;
    });
    
    svg2.selectAll("rect").on("mouseout", function (event, d) {
      onRect = false;
    });

    svg2.on('click', function (d) {
      if (!onRect){
        chartArea.selectAll(".k20").style("opacity", 1);
        chartArea.selectAll(".k80").style("opacity", 1);
        chartArea.selectAll(".k310").style("opacity", 1);
        chartArea.selectAll(".k13k").style("opacity", 1);
        chartArea.selectAll(".k49k").style("opacity", 1);
        chartArea.selectAll(".k20k").style("opacity", 1);
        chartArea.selectAll(".k77k").style("opacity", 1);
        chartArea.selectAll(".k310k").style("opacity", 1);
      }
    });
  }
  requestData();



</script>

</html>